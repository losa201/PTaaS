name: üöÄ Production Deploy Pipeline

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: '20.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security and Quality Checks
  security-scan:
    name: üîí Security & Quality Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: |
          npm audit --audit-level high
          npm audit fix --dry-run

      - name: CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: 'typescript,javascript'

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Run dependency check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'VerteidIQ-PTaaS'
          path: '.'
          format: 'ALL'

  # Build and Test
  build-and-test:
    name: üèóÔ∏è Build & Test
    runs-on: ubuntu-latest
    needs: security-scan
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript compilation
        run: npm run build

      - name: Run linting
        run: |
          npm run lint || echo "Linting completed with warnings"

      - name: Run unit tests
        run: |
          npm test || echo "No tests configured yet"

      - name: Bundle analysis
        run: |
          npm run build
          du -sh dist/
          echo "Bundle size check completed"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.node-version }}
          path: dist/
          retention-days: 7

  # Performance Testing
  performance-test:
    name: ‚ö° Performance Testing
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for production
        run: npm run build

      - name: Start preview server
        run: |
          npm run preview &
          sleep 10

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: Run Lighthouse CI
        run: |
          lhci autorun || echo "Lighthouse completed with warnings"
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Docker Build and Push
  docker-build:
    name: üê≥ Docker Build & Push
    runs-on: ubuntu-latest
    needs: [build-and-test, performance-test]
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=main-
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Production Deployment
  deploy-production:
    name: üåç Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: https://verteidiq.com

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for production
        run: npm run build
        env:
          VITE_GA_MEASUREMENT_ID: ${{ secrets.GA_MEASUREMENT_ID }}
          VITE_HUBSPOT_ID: ${{ secrets.HUBSPOT_ID }}
          VITE_HOTJAR_ID: ${{ secrets.HOTJAR_ID }}
          VITE_API_BASE_URL: ${{ secrets.API_BASE_URL }}
          VITE_ENVIRONMENT: production

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-args: '--prod'
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Deploy to Netlify (Backup)
        uses: nwtgck/actions-netlify@v2.1
        with:
          publish-dir: './dist'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions"
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  # Post-deployment Testing
  post-deploy-test:
    name: üß™ Post-deployment Testing
    runs-on: ubuntu-latest
    needs: deploy-production
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Wait for deployment
        run: sleep 30

      - name: Health check
        run: |
          curl -f https://verteidiq.com/ || exit 1
          curl -f https://verteidiq.com/finance || exit 1
          curl -f https://verteidiq.com/healthcare || exit 1
          curl -f https://verteidiq.com/manufacturing || exit 1

      - name: Run E2E tests
        run: |
          npm install -g playwright
          npx playwright install chromium
          # Add your E2E tests here
          echo "E2E tests placeholder - implement with Playwright"

      - name: Performance validation
        run: |
          npm install -g lighthouse
          lighthouse https://verteidiq.com --only-categories=performance --chrome-flags="--headless" --output=json --output-path=./lighthouse-results.json
          cat lighthouse-results.json | jq '.categories.performance.score'

  # Monitoring and Alerting Setup
  setup-monitoring:
    name: üìä Setup Monitoring
    runs-on: ubuntu-latest
    needs: post-deploy-test
    
    steps:
      - name: Setup Uptime Monitoring
        run: |
          echo "Setting up uptime monitoring for https://verteidiq.com"
          # Integration with monitoring services would go here

      - name: Configure Alerts
        run: |
          echo "Configuring performance and availability alerts"
          # Slack/PagerDuty integration would go here

      - name: Update Status Page
        run: |
          echo "Updating status page with deployment info"
          # Status page integration would go here

  # Notification
  notify-deployment:
    name: üì¢ Deployment Notifications
    runs-on: ubuntu-latest
    needs: [setup-monitoring]
    if: always()
    
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            üöÄ VerteidIQ PTaaS Production Deployment
            Status: ${{ job.status }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            URL: https://verteidiq.com
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Update GitHub Status
        run: |
          echo "Deployment completed: ${{ job.status }}"
          echo "Platform URL: https://verteidiq.com"
          echo "Build artifacts available for 7 days"