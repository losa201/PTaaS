import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Progress } from '@/components/ui/progress';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { 
  Shield,
  AlertTriangle,
  CheckCircle2,
  XCircle,
  Clock,
  Users,
  Activity,
  Search,
  Filter,
  Download,
  RefreshCw,
  Play,
  Pause,
  StopCircle,
  Eye,
  MessageSquare,
  Phone,
  Mail,
  FileText,
  Calendar,
  MapPin,
  Zap,
  Target,
  Flag,
  AlertCircle,
  CheckCircle,
  XOctagon,
  PlayCircle,
  PauseCircle,
  Settings,
  Plus,
  Minus,
  ArrowRight,
  ArrowUp,
  ArrowDown,
  Info,
  AlertOctagon,
  Bell,
  BellRing,
  Siren,
  UserCheck,
  UserX,
  Network,
  Server,
  Database,
  Globe,
  Wifi,
  Lock,
  Unlock,
  Bug,
  Skull,
  Crown,
  Award,
  Star,
  TrendingUp,
  TrendingDown,
  BarChart3,
  PieChart,
  LineChart,
  Gauge,
  Crosshair,
  Radar,
  Microscope,
  GitBranch,
  Layers,
  HardDrive,
  Cpu,
  Timer,
  Workflow
} from 'lucide-react';
import { motion } from 'framer-motion';

interface Vulnerability {
  id: string;
  name: string;
  description: string;
  severity: "low" | "medium" | "high";
  status: "open" | "in progress" | "resolved" | "closed";
  cvssScore: number;
  affectedAsset: string;
  dateDiscovered: string;
  dateResolved?: string;
  assignedTo: string;
  remediationSteps: string[];
  tags: string[];
}

const mockVulnerabilities: Vulnerability[] = [
  {
    id: "vuln-001",
    name: "SQL Injection Vulnerability",
    description: "A SQL injection vulnerability was detected in the user authentication module.",
    severity: "high",
    status: "open",
    cvssScore: 9.2,
    affectedAsset: "Web Application",
    dateDiscovered: "2024-01-15",
    assignedTo: "John Doe",
    remediationSteps: [
      "Sanitize all user inputs to prevent SQL injection attacks.",
      "Implement parameterized queries or prepared statements.",
      "Regularly update database software to the latest version."
    ],
    tags: ["sql injection", "web application", "authentication"]
  },
  {
    id: "vuln-002",
    name: "Cross-Site Scripting (XSS)",
    description: "A stored XSS vulnerability was found in the comment section of the blog.",
    severity: "medium",
    status: "in progress",
    cvssScore: 7.8,
    affectedAsset: "Blog",
    dateDiscovered: "2024-02-01",
    assignedTo: "Jane Smith",
    remediationSteps: [
      "Encode or escape user-supplied input in the comment section.",
      "Implement Content Security Policy (CSP) to mitigate XSS attacks.",
      "Regularly audit and test the blog for XSS vulnerabilities."
    ],
    tags: ["xss", "web application", "blog"]
  },
  {
    id: "vuln-003",
    name: "Unpatched Apache Struts Vulnerability",
    description: "The Apache Struts version is outdated and vulnerable to remote code execution.",
    severity: "high",
    status: "resolved",
    cvssScore: 10.0,
    affectedAsset: "Struts Server",
    dateDiscovered: "2024-02-10",
    dateResolved: "2024-02-12",
    assignedTo: "Bob Johnson",
    remediationSteps: [
      "Upgrade Apache Struts to the latest patched version.",
      "Apply all security patches recommended by the vendor.",
      "Monitor the server for any signs of exploitation."
    ],
    tags: ["apache struts", "remote code execution", "server"]
  },
  {
    id: "vuln-004",
    name: "Weak Password Policy",
    description: "The password policy does not enforce strong password requirements.",
    severity: "low",
    status: "closed",
    cvssScore: 4.0,
    affectedAsset: "User Accounts",
    dateDiscovered: "2024-03-01",
    dateResolved: "2024-03-05",
    assignedTo: "Alice Brown",
    remediationSteps: [
      "Enforce a strong password policy with minimum length and complexity requirements.",
      "Implement multi-factor authentication (MFA) for all user accounts.",
      "Educate users about the importance of strong passwords."
    ],
    tags: ["password policy", "user accounts", "authentication"]
  },
  {
    id: "vuln-005",
    name: "Sensitive Data Exposure",
    description: "Sensitive data such as API keys and credentials are exposed in the source code.",
    severity: "high",
    status: "open",
    cvssScore: 8.5,
    affectedAsset: "Source Code",
    dateDiscovered: "2024-03-15",
    assignedTo: "Charlie Davis",
    remediationSteps: [
      "Remove sensitive data from the source code.",
      "Store sensitive data in secure configuration files or environment variables.",
      "Implement access controls to restrict access to sensitive data."
    ],
    tags: ["sensitive data", "source code", "api keys"]
  },
  {
    id: "vuln-006",
    name: "Denial of Service (DoS) Vulnerability",
    description: "The application is vulnerable to denial of service attacks due to lack of rate limiting.",
    severity: "medium",
    status: "in progress",
    cvssScore: 6.8,
    affectedAsset: "Application Server",
    dateDiscovered: "2024-04-01",
    assignedTo: "Diana Evans",
    remediationSteps: [
      "Implement rate limiting to restrict the number of requests from a single IP address.",
      "Use a web application firewall (WAF) to filter malicious traffic.",
      "Monitor the server for any signs of denial of service attacks."
    ],
    tags: ["dos", "application server", "rate limiting"]
  },
  {
    id: "vuln-007",
    name: "Insecure Direct Object Reference (IDOR)",
    description: "Users can access other users' data by manipulating object references.",
    severity: "high",
    status: "open",
    cvssScore: 9.0,
    affectedAsset: "User Data",
    dateDiscovered: "2024-04-15",
    assignedTo: "Ethan Foster",
    remediationSteps: [
      "Implement proper authorization checks to ensure users can only access their own data.",
      "Use indirect object references to prevent users from manipulating object references.",
      "Regularly audit and test the application for IDOR vulnerabilities."
    ],
    tags: ["idor", "user data", "authorization"]
  },
  {
    id: "vuln-008",
    name: "LDAP Injection Vulnerability",
    description: "An LDAP injection vulnerability was detected in the user search module.",
    severity: "medium",
    status: "resolved",
    cvssScore: 7.5,
    affectedAsset: "LDAP Server",
    dateDiscovered: "2024-05-01",
    dateResolved: "2024-05-03",
    assignedTo: "Fiona Green",
    remediationSteps: [
      "Sanitize all user inputs to prevent LDAP injection attacks.",
      "Implement parameterized queries or prepared statements.",
      "Regularly update LDAP server software to the latest version."
    ],
    tags: ["ldap injection", "ldap server", "authentication"]
  },
  {
    id: "vuln-009",
    name: "Clickjacking Vulnerability",
    description: "The application is vulnerable to clickjacking attacks due to lack of frame protection.",
    severity: "low",
    status: "closed",
    cvssScore: 3.5,
    affectedAsset: "Web Pages",
    dateDiscovered: "2024-05-15",
    dateResolved: "2024-05-20",
    assignedTo: "George Hill",
    remediationSteps: [
      "Implement frame protection mechanisms such as X-Frame-Options or Content Security Policy (CSP).",
      "Educate users about the risks of clickjacking attacks.",
      "Regularly audit and test the application for clickjacking vulnerabilities."
    ],
    tags: ["clickjacking", "web pages", "frame protection"]
  },
  {
    id: "vuln-010",
    name: "Unvalidated Redirects and Forwards",
    description: "The application uses unvalidated redirects and forwards, allowing attackers to redirect users to malicious websites.",
    severity: "medium",
    status: "open",
    cvssScore: 6.0,
    affectedAsset: "Web Application",
    dateDiscovered: "2024-06-01",
    assignedTo: "Hannah Irwin",
    remediationSteps: [
      "Validate all redirects and forwards to ensure they point to trusted destinations.",
      "Avoid using user-supplied input in redirects and forwards.",
      "Implement a whitelist of allowed redirect destinations."
    ],
    tags: ["redirects", "forwards", "web application"]
  }
];

const severityColorMap: { [key: string]: string } = {
  low: "text-green-600 bg-green-100 border-green-200",
  medium: "text-yellow-600 bg-yellow-100 border-yellow-200",
  high: "text-red-600 bg-red-100 border-red-200",
};

const statusColorMap: { [key: string]: string } = {
  open: "bg-red-100 text-red-800 border-red-200",
  "in progress": "bg-blue-100 text-blue-800 border-blue-200",
  resolved: "bg-green-100 text-green-800 border-green-200",
  closed: "bg-gray-100 text-gray-800 border-gray-200",
};

const VulnerabilityManagement = () => {
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>(mockVulnerabilities);
  const [selectedSeverity, setSelectedSeverity] = useState<"all" | "low" | "medium" | "high">("all");
  const [selectedStatus, setSelectedStatus] = useState<"all" | "open" | "in progress" | "resolved" | "closed">("all");
  const [searchTerm, setSearchTerm] = useState("");
  const [sortColumn, setSortColumn] = useState<keyof Vulnerability | null>("dateDiscovered");
  const [sortDirection, setSortDirection] = useState<"asc" | "desc">("desc");

  const filteredVulnerabilities = vulnerabilities.filter((vuln) => {
    const severityMatch = selectedSeverity === "all" || vuln.severity === selectedSeverity;
    const statusMatch = selectedStatus === "all" || vuln.status === selectedStatus;
    const searchTermMatch =
      vuln.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      vuln.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
      vuln.affectedAsset.toLowerCase().includes(searchTerm.toLowerCase());

    return severityMatch && statusMatch && searchTermMatch;
  });

  const sortedVulnerabilities = [...filteredVulnerabilities].sort((a, b) => {
    if (!sortColumn) return 0;

    const aValue = a[sortColumn];
    const bValue = b[sortColumn];

    if (aValue < bValue) {
      return sortDirection === "asc" ? -1 : 1;
    }
    if (aValue > bValue) {
      return sortDirection === "asc" ? 1 : -1;
    }
    return 0;
  });

  const handleSort = (column: keyof Vulnerability) => {
    if (sortColumn === column) {
      setSortDirection(sortDirection === "asc" ? "desc" : "asc");
    } else {
      setSortColumn(column);
      setSortDirection("asc");
    }
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6 }}
        className="mb-8"
      >
        <h1 className="text-4xl font-bold bg-gradient-to-r from-red-600 to-orange-600 bg-clip-text text-transparent mb-4">
          Vulnerability Management
        </h1>
        <p className="text-lg text-gray-600 max-w-3xl">
          Identify, assess, and remediate vulnerabilities across your entire attack surface with automated scanning,
          prioritization, and workflow management.
        </p>
      </motion.div>

      <Card className="mb-6">
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
              <Input
                type="text"
                placeholder="Search vulnerabilities..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>
            <div>
              <Select value={selectedSeverity} onValueChange={(value) => setSelectedSeverity(value as any)}>
                <SelectTrigger className="w-full">
                  <SelectValue placeholder="Filter by Severity" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Severities</SelectItem>
                  <SelectItem value="low">Low</SelectItem>
                  <SelectItem value="medium">Medium</SelectItem>
                  <SelectItem value="high">High</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div>
              <Select value={selectedStatus} onValueChange={(value) => setSelectedStatus(value as any)}>
                <SelectTrigger className="w-full">
                  <SelectValue placeholder="Filter by Status" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Statuses</SelectItem>
                  <SelectItem value="open">Open</SelectItem>
                  <SelectItem value="in progress">In Progress</SelectItem>
                  <SelectItem value="resolved">Resolved</SelectItem>
                  <SelectItem value="closed">Closed</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        </CardContent>
      </Card>

      <div className="overflow-x-auto">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th
                className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer"
                onClick={() => handleSort("name")}
              >
                Name
                {sortColumn === "name" && (sortDirection === "asc" ? <ArrowUp className="inline-block w-4 h-4 ml-1" /> : <ArrowDown className="inline-block w-4 h-4 ml-1" />)}
              </th>
              <th
                className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer"
                onClick={() => handleSort("severity")}
              >
                Severity
                {sortColumn === "severity" && (sortDirection === "asc" ? <ArrowUp className="inline-block w-4 h-4 ml-1" /> : <ArrowDown className="inline-block w-4 h-4 ml-1" />)}
              </th>
              <th
                className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer"
                onClick={() => handleSort("status")}
              >
                Status
                {sortColumn === "status" && (sortDirection === "asc" ? <ArrowUp className="inline-block w-4 h-4 ml-1" /> : <ArrowDown className="inline-block w-4 h-4 ml-1" />)}
              </th>
              <th
                className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer"
                onClick={() => handleSort("cvssScore")}
              >
                CVSS Score
                {sortColumn === "cvssScore" && (sortDirection === "asc" ? <ArrowUp className="inline-block w-4 h-4 ml-1" /> : <ArrowDown className="inline-block w-4 h-4 ml-1" />)}
              </th>
              <th
                className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer"
                onClick={() => handleSort("affectedAsset")}
              >
                Affected Asset
                {sortColumn === "affectedAsset" && (sortDirection === "asc" ? <ArrowUp className="inline-block w-4 h-4 ml-1" /> : <ArrowDown className="inline-block w-4 h-4 ml-1" />)}
              </th>
              <th
                className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer"
                onClick={() => handleSort("dateDiscovered")}
              >
                Date Discovered
                {sortColumn === "dateDiscovered" && (sortDirection === "asc" ? <ArrowUp className="inline-block w-4 h-4 ml-1" /> : <ArrowDown className="inline-block w-4 h-4 ml-1" />)}
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Actions
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {sortedVulnerabilities.map((vuln) => (
              <tr key={vuln.id}>
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="text-sm font-medium text-gray-900">{vuln.name}</div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <Badge className={severityColorMap[vuln.severity]}>{vuln.severity}</Badge>
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <Badge className={statusColorMap[vuln.status]}>{vuln.status}</Badge>
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="text-sm text-gray-900">{vuln.cvssScore}</div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="text-sm text-gray-900">{vuln.affectedAsset}</div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="text-sm text-gray-900">{vuln.dateDiscovered}</div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                  <Button variant="outline" size="sm">
                    <Eye className="w-4 h-4 mr-2" />
                    Details
                  </Button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default VulnerabilityManagement;
