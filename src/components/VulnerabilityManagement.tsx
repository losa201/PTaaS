import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Progress } from '@/components/ui/progress';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { 
  Shield,
  AlertTriangle,
  CheckCircle2,
  XCircle,
  Clock,
  Users,
  Activity,
  Search,
  Filter,
  Download,
  RefreshCw,
  Play,
  Pause,
  StopCircle,
  Eye,
  MessageSquare,
  Phone,
  Mail,
  FileText,
  Calendar,
  MapPin,
  Zap,
  Target,
  Flag,
  AlertCircle,
  CheckCircle,
  XOctagon,
  PlayCircle,
  PauseCircle,
  Settings,
  Plus,
  Minus,
  ArrowRight,
  ArrowUp,
  ArrowDown,
  Info,
  AlertOctagon,
  Bell,
  BellRing,
  Siren,
  UserCheck,
  UserX,
  Network,
  Server,
  Database,
  Globe,
  Wifi,
  Lock,
  Unlock,
  Bug,
  Skull,
  Crown,
  Award,
  Star,
  TrendingUp,
  TrendingDown,
  BarChart3,
  PieChart,
  LineChart,
  Gauge,
  Crosshair,
  Radar,
  Microscope,
  GitBranch,
  Layers,
  HardDrive,
  Cpu,
  Timer,
  Workflow
} from 'lucide-react';
import { motion } from 'framer-motion';

// Define types for vulnerability data
interface Vulnerability {
  id: string;
  title: string;
  description: string;
  severity: 'critical' | 'high' | 'medium' | 'low';
  cvssScore: number;
  affectedAsset: string;
  status: 'open' | 'in_progress' | 'resolved' | 'closed';
  discoveredAt: string;
  remediationDueDate: string;
  assignedTo: string;
  tags: string[];
  evidence: Evidence[];
  timeline: TimelineEvent[];
}

interface Evidence {
  id: string;
  type: 'log' | 'screenshot' | 'file' | 'network_capture';
  name: string;
  description: string;
  collectedBy: string;
  collectedAt: string;
  hash: string;
  size: number;
  location: string;
}

interface TimelineEvent {
  id: string;
  timestamp: string;
  event: string;
  actor: string;
  description: string;
}

interface Asset {
  id: string;
  name: string;
  type: 'server' | 'workstation' | 'network_device' | 'application';
  owner: string;
  location: string;
  criticality: 'high' | 'medium' | 'low';
  os: string;
  ipAddress: string;
  lastScanned: string;
}

interface ScanReport {
  id: string;
  name: string;
  startTime: string;
  endTime: string;
  status: 'running' | 'completed' | 'failed';
  scannerVersion: string;
  totalVulnerabilities: number;
  criticalVulnerabilities: number;
  highVulnerabilities: number;
  mediumVulnerabilities: number;
  lowVulnerabilities: number;
  assetsScanned: number;
}

interface RemediationTask {
  id: string;
  vulnerabilityId: string;
  description: string;
  status: 'open' | 'in_progress' | 'pending_review' | 'completed';
  assignedTo: string;
  dueDate: string;
  priority: 'high' | 'medium' | 'low';
  notes: string;
}

const VulnerabilityManagement: React.FC = () => {
  const [activeTab, setActiveTab] = useState('dashboard');
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedSeverity, setSelectedSeverity] = useState('all');
  const [selectedStatus, setSelectedStatus] = useState('all');
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([
    {
      id: 'vuln-001',
      title: 'Critical: SQL Injection Vulnerability',
      description: 'A SQL injection vulnerability was detected in the user authentication module. An attacker could potentially gain unauthorized access to the database.',
      severity: 'critical',
      cvssScore: 9.8,
      affectedAsset: 'web-app-01',
      status: 'open',
      discoveredAt: '2025-08-01T14:22:00Z',
      remediationDueDate: '2025-08-15T00:00:00Z',
      assignedTo: 'John Doe',
      tags: ['sql_injection', 'web_application', 'authentication'],
      evidence: [],
      timeline: []
    },
    {
      id: 'vuln-002',
      title: 'High: Unpatched Apache Struts Version',
      description: 'The Apache Struts framework is running an outdated version with known remote code execution vulnerabilities. Immediate patching is required.',
      severity: 'high',
      cvssScore: 8.5,
      affectedAsset: 'web-server-02',
      status: 'in_progress',
      discoveredAt: '2025-08-03T09:15:00Z',
      remediationDueDate: '2025-08-10T00:00:00Z',
      assignedTo: 'Jane Smith',
      tags: ['apache_struts', 'remote_code_execution', 'patching'],
      evidence: [],
      timeline: []
    },
    {
      id: 'vuln-003',
      title: 'Medium: Weak Password Policy',
      description: 'The password policy does not enforce strong password requirements, making user accounts vulnerable to brute-force attacks.',
      severity: 'medium',
      cvssScore: 6.2,
      affectedAsset: 'domain_controller',
      status: 'resolved',
      discoveredAt: '2025-08-05T11:30:00Z',
      remediationDueDate: '2025-08-12T00:00:00Z',
      assignedTo: 'Bob Johnson',
      tags: ['password_policy', 'brute_force', 'authentication'],
      evidence: [],
      timeline: []
    },
    {
      id: 'vuln-004',
      title: 'Low: Missing Security Headers',
      description: 'The web server is missing recommended security headers, which can expose users to clickjacking and XSS attacks.',
      severity: 'low',
      cvssScore: 4.1,
      affectedAsset: 'web-server-01',
      status: 'closed',
      discoveredAt: '2025-08-07T16:45:00Z',
      remediationDueDate: '2025-08-14T00:00:00Z',
      assignedTo: 'Alice Brown',
      tags: ['security_headers', 'clickjacking', 'xss'],
      evidence: [],
      timeline: []
    }
  ]);
  const [assets, setAssets] = useState<Asset[]>([
    {
      id: 'asset-001',
      name: 'Web Application Server 01',
      type: 'server',
      owner: 'Development Team',
      location: 'Data Center A',
      criticality: 'high',
      os: 'Linux',
      ipAddress: '192.168.1.100',
      lastScanned: '2025-08-08T10:00:00Z'
    },
    {
      id: 'asset-002',
      name: 'Database Server 01',
      type: 'server',
      owner: 'Database Team',
      location: 'Data Center B',
      criticality: 'critical',
      os: 'Windows Server',
      ipAddress: '192.168.1.101',
      lastScanned: '2025-08-09T12:00:00Z'
    }
  ]);
  const [scanReports, setScanReports] = useState<ScanReport[]>([
    {
      id: 'scan-001',
      name: 'Weekly Full Scan',
      startTime: '2025-08-08T22:00:00Z',
      endTime: '2025-08-09T06:00:00Z',
      status: 'completed',
      scannerVersion: 'v3.2.1',
      totalVulnerabilities: 42,
      criticalVulnerabilities: 2,
      highVulnerabilities: 8,
      mediumVulnerabilities: 15,
      lowVulnerabilities: 17,
      assetsScanned: 150
    }
  ]);
  const [remediationTasks, setRemediationTasks] = useState<RemediationTask[]>([
    {
      id: 'task-001',
      vulnerabilityId: 'vuln-001',
      description: 'Implement parameterized queries to prevent SQL injection',
      status: 'open',
      assignedTo: 'John Doe',
      dueDate: '2025-08-15T00:00:00Z',
      priority: 'high',
      notes: 'Ensure all user inputs are properly sanitized'
    }
  ]);

  const filteredVulnerabilities = vulnerabilities.filter(vulnerability => {
    const matchesSearch = vulnerability.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
                          vulnerability.description.toLowerCase().includes(searchQuery.toLowerCase());
    const matchesSeverity = selectedSeverity === 'all' || vulnerability.severity === selectedSeverity;
    const matchesStatus = selectedStatus === 'all' || vulnerability.status === selectedStatus;
    return matchesSearch && matchesSeverity && matchesStatus;
  });

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'bg-red-100 text-red-800';
      case 'high': return 'bg-orange-100 text-orange-800';
      case 'medium': return 'bg-yellow-100 text-yellow-800';
      case 'low': return 'bg-green-100 text-green-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'open': return 'bg-red-100 text-red-800';
      case 'in_progress': return 'bg-yellow-100 text-yellow-800';
      case 'resolved': return 'bg-green-100 text-green-800';
      case 'closed': return 'bg-gray-100 text-gray-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6 }}
        className="mb-8"
      >
        <div className="flex justify-between items-center mb-4">
          <div>
            <h1 className="text-4xl font-bold bg-gradient-to-r from-red-600 to-orange-600 bg-clip-text text-transparent">
              Vulnerability Management
            </h1>
            <p className="text-lg text-gray-600 mt-2">
              Identify, assess, and remediate vulnerabilities across your digital assets
            </p>
          </div>
          <div className="flex items-center gap-4">
            <Button variant="outline" size="sm">
              <Download className="h-4 w-4 mr-2" />
              Export Report
            </Button>
            <Button className="bg-red-600 hover:bg-red-700">
              <Plus className="h-4 w-4 mr-2" />
              Create Vulnerability
            </Button>
          </div>
        </div>

        {/* Quick Metrics */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
          <motion.div
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ delay: 0.1 }}
          >
            <Card>
              <CardContent className="pt-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-gray-600">Open Vulnerabilities</p>
                    <p className="text-3xl font-bold text-red-600">{vulnerabilities.filter(v => v.status === 'open').length}</p>
                  </div>
                  <AlertTriangle className="h-8 w-8 text-red-600" />
                </div>
                <div className="mt-2">
                  <Badge className="bg-red-100 text-red-800">
                    {vulnerabilities.filter(v => v.severity === 'critical' && v.status === 'open').length} Critical
                  </Badge>
                </div>
              </CardContent>
            </Card>
          </motion.div>

          <motion.div
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ delay: 0.2 }}
          >
            <Card>
              <CardContent className="pt-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-gray-600">Assets Monitored</p>
                    <p className="text-3xl font-bold text-blue-600">{assets.length}</p>
                  </div>
                  <Server className="h-8 w-8 text-blue-600" />
                </div>
                <div className="mt-2">
                  <span className="text-green-600 text-sm">+2 this week</span>
                </div>
              </CardContent>
            </Card>
          </motion.div>

          <motion.div
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ delay: 0.3 }}
          >
            <Card>
              <CardContent className="pt-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-gray-600">Mean Time to Remediate</p>
                    <p className="text-3xl font-bold text-orange-600">28d</p>
                  </div>
                  <Clock className="h-8 w-8 text-orange-600" />
                </div>
                <div className="mt-2">
                  <Progress value={60} className="h-2" />
                </div>
              </CardContent>
            </Card>
          </motion.div>

          <motion.div
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ delay: 0.4 }}
          >
            <Card>
              <CardContent className="pt-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-gray-600">Automated Scans</p>
                    <p className="text-3xl font-bold text-purple-600">{scanReports.length}</p>
                  </div>
                  <RefreshCw className="h-8 w-8 text-purple-600" />
                </div>
              </CardContent>
            </Card>
          </motion.div>
        </div>
      </motion.div>

      <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="dashboard" className="flex items-center gap-2">
            <BarChart3 className="h-4 w-4" />
            Dashboard
          </TabsTrigger>
          <TabsTrigger value="vulnerabilities" className="flex items-center gap-2">
            <AlertTriangle className="h-4 w-4" />
            Vulnerabilities
          </TabsTrigger>
          <TabsTrigger value="assets" className="flex items-center gap-2">
            <HardDrive className="h-4 w-4" />
            Assets
          </TabsTrigger>
          <TabsTrigger value="reports" className="flex items-center gap-2">
            <FileText className="h-4 w-4" />
            Scan Reports
          </TabsTrigger>
        </TabsList>

        {/* Dashboard Overview */}
        <TabsContent value="dashboard" className="space-y-6">
          {/* Vulnerability Summary */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <AlertTriangle className="h-5 w-5" />
                  Vulnerability Summary
                </CardTitle>
                <CardDescription>Overview of vulnerability status and severity</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {['critical', 'high', 'medium', 'low'].map((severity) => {
                    const count = vulnerabilities.filter(v => v.severity === severity).length;
                    const percentage = (count / vulnerabilities.length) * 100;
                    return (
                      <div key={severity} className="flex items-center justify-between">
                        <div className="flex items-center gap-2">
                          <Badge className={getSeverityColor(severity)}>{severity}</Badge>
                        </div>
                        <div className="flex items-center gap-2">
                          <Progress value={percentage} className="w-24 h-2" />
                          <span className="text-sm font-medium w-8">{count}</span>
                        </div>
                      </div>
                    );
                  })}
                </div>
              </CardContent>
            </Card>

            {/* Asset Summary */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <HardDrive className="h-5 w-5" />
                  Asset Summary
                </CardTitle>
                <CardDescription>Distribution of assets by type and criticality</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {['server', 'workstation', 'network_device', 'application'].map((type) => {
                    const count = assets.filter(a => a.type === type).length;
                    const percentage = (count / assets.length) * 100;
                    return (
                      <div key={type} className="flex items-center justify-between">
                        <div className="flex items-center gap-2">
                          <span className="capitalize font-medium">{type.replace('_', ' ')}</span>
                        </div>
                        <div className="flex items-center gap-2">
                          <Progress value={percentage} className="w-24 h-2" />
                          <span className="text-sm font-medium w-8">{count}</span>
                        </div>
                      </div>
                    );
                  })}
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Recent Scan Reports */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <FileText className="h-5 w-5" />
                Recent Scan Reports
              </CardTitle>
              <CardDescription>Latest vulnerability scan results and trends</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {scanReports.map(report => (
                  <Alert key={report.id}>
                    <Info className="h-4 w-4" />
                    <AlertDescription>
                      <strong>{report.name}</strong> - {report.status} - {report.totalVulnerabilities} vulnerabilities found
                    </AlertDescription>
                  </Alert>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Vulnerabilities Tab */}
        <TabsContent value="vulnerabilities" className="space-y-6">
          {/* Search and Filter Controls */}
          <div className="flex items-center gap-4 mb-6">
            <div className="relative flex-1 max-w-md">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
              <Input
                placeholder="Search vulnerabilities..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="pl-10"
              />
            </div>
            <Select value={selectedStatus} onValueChange={setSelectedStatus}>
              <SelectTrigger className="w-[160px]">
                <SelectValue placeholder="Status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Status</SelectItem>
                <SelectItem value="open">Open</SelectItem>
                <SelectItem value="in_progress">In Progress</SelectItem>
                <SelectItem value="resolved">Resolved</SelectItem>
                <SelectItem value="closed">Closed</SelectItem>
              </SelectContent>
            </Select>
            <Select value={selectedSeverity} onValueChange={setSelectedSeverity}>
              <SelectTrigger className="w-[160px]">
                <SelectValue placeholder="Severity" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Severity</SelectItem>
                <SelectItem value="critical">Critical</SelectItem>
                <SelectItem value="high">High</SelectItem>
                <SelectItem value="medium">Medium</SelectItem>
                <SelectItem value="low">Low</SelectItem>
              </SelectContent>
            </Select>
          </div>

          {/* Vulnerability List */}
          <div className="grid gap-6">
            {filteredVulnerabilities.map((vulnerability, index) => (
              <motion.div
                key={vulnerability.id}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: index * 0.1 }}
              >
                <Card className={`border-l-4 ${
                  vulnerability.severity === 'critical' ? 'border-l-red-500' :
                  vulnerability.severity === 'high' ? 'border-l-orange-500' :
                  vulnerability.severity === 'medium' ? 'border-l-yellow-500' :
                  'border-l-green-500'
                }`}>
                  <CardHeader>
                    <div className="flex justify-between items-start">
                      <div className="flex-1">
                        <div className="flex items-center gap-3 mb-2">
                          <CardTitle className="text-lg">{vulnerability.title}</CardTitle>
                          <Badge className={getSeverityColor(vulnerability.severity)}>
                            {vulnerability.severity}
                          </Badge>
                          <Badge className={getStatusColor(vulnerability.status)}>
                            {vulnerability.status.replace('_', ' ')}
                          </Badge>
                        </div>
                        <CardDescription className="mb-2">{vulnerability.description}</CardDescription>
                        <div className="flex items-center gap-4 text-sm text-gray-600">
                          <span>ID: {vulnerability.id}</span>
                          <span>CVSS: {vulnerability.cvssScore}</span>
                          <span>Discovered: {new Date(vulnerability.discoveredAt).toLocaleDateString()}</span>
                        </div>
                      </div>
                      <div className="text-right">
                        <div className="text-2xl font-bold text-red-600 mb-1">
                          {vulnerability.cvssScore}
                        </div>
                        <p className="text-xs text-gray-600">CVSS Score</p>
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div>
                      <p className="font-medium">Affected Asset</p>
                      <p className="text-gray-600">{vulnerability.affectedAsset}</p>
                    </div>
                    <div>
                      <p className="font-medium">Tags</p>
                      <div className="flex flex-wrap gap-2">
                        {vulnerability.tags.map((tag, idx) => (
                          <Badge key={idx} variant="secondary">
                            {tag}
                          </Badge>
                        ))}
                      </div>
                    </div>
                    <div className="flex items-center justify-between pt-4 border-t">
                      <div className="flex items-center gap-2">
                        <span className="text-sm text-gray-600">
                          Due Date: {new Date(vulnerability.remediationDueDate).toLocaleDateString()}
                        </span>
                      </div>
                      <div className="flex gap-2">
                        <Button size="sm" variant="outline">
                          <Eye className="h-4 w-4 mr-2" />
                          View Details
                        </Button>
                        <Button size="sm">
                          <Zap className="h-4 w-4 mr-2" />
                          Remediate
                        </Button>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </motion.div>
            ))}
          </div>
        </TabsContent>

        {/* Assets Tab */}
        <TabsContent value="assets" className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {assets.map(asset => (
              <motion.div
                key={asset.id}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.4 }}
              >
                <Card>
                  <CardHeader>
                    <CardTitle>{asset.name}</CardTitle>
                    <CardDescription>
                      {asset.type} - {asset.os}
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-2">
                    <p>
                      <strong>Owner:</strong> {asset.owner}
                    </p>
                    <p>
                      <strong>Location:</strong> {asset.location}
                    </p>
                    <p>
                      <strong>IP Address:</strong> {asset.ipAddress}
                    </p>
                    <p>
                      <strong>Last Scanned:</strong> {new Date(asset.lastScanned).toLocaleDateString()}
                    </p>
                    <Button variant="outline">View Details</Button>
                  </CardContent>
                </Card>
              </motion.div>
            ))}
          </div>
        </TabsContent>

        {/* Scan Reports Tab */}
        <TabsContent value="reports" className="space-y-6">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {scanReports.map(report => (
              <motion.div
                key={report.id}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.4 }}
              >
                <Card>
                  <CardHeader>
                    <CardTitle>{report.name}</CardTitle>
                    <CardDescription>
                      {new Date(report.startTime).toLocaleDateString()} - {new Date(report.endTime).toLocaleDateString()}
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-2">
                    <p>
                      <strong>Status:</strong> {report.status}
                    </p>
                    <p>
                      <strong>Scanner Version:</strong> {report.scannerVersion}
                    </p>
                    <p>
                      <strong>Total Vulnerabilities:</strong> {report.totalVulnerabilities}
                    </p>
                    <Button variant="outline">View Report</Button>
                  </CardContent>
                </Card>
              </motion.div>
            ))}
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default VulnerabilityManagement;
