import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Input } from '@/components/ui/input';
import { Progress } from '@/components/ui/progress';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { 
  Shield,
  AlertTriangle,
  CheckCircle2,
  XCircle,
  Clock,
  Target,
  Search,
  Filter,
  Download,
  RefreshCw,
  Play,
  Pause,
  Eye,
  Calendar,
  MapPin,
  Zap,
  Activity,
  BarChart3,
  PieChart,
  TrendingUp,
  TrendingDown,
  ArrowUp,
  ArrowDown,
  ArrowRight,
  Plus,
  Settings,
  Info,
  AlertCircle,
  CheckCircle,
  XOctagon,
  Bug,
  Skull,
  Crown,
  Award,
  Star,
  Gauge,
  Radar,
  Crosshair,
  Microscope,
  GitBranch,
  Layers,
  Network,
  Server,
  Database,
  Globe,
  Wifi,
  Lock,
  Unlock,
  HardDrive,
  Cpu,
  Users,
  FileText,
  Mail,
  Phone,
  Bell,
  BellRing,
  Timer,
  Flag,
  Flame,
  Wrench,
  Code,
  Terminal,
  GitCommit,
  Package,
  Archive,
  History,
  TrendingRight,
  LineChart,
  ExternalLink,
  Link2,
  Scan,
  ScanLine,
  ShieldCheck,
  ShieldX,
  ShieldAlert
} from 'lucide-react';
import { motion } from 'framer-motion';

interface Vulnerability {
  id: string;
  cveId?: string;
  title: string;
  description: string;
  severity: 'critical' | 'high' | 'medium' | 'low' | 'informational';
  cvssScore: number;
  cvssVector: string;
  category: string;
  cweId?: string;
  affectedAssets: Asset[];
  discoveredDate: string;
  lastSeen: string;
  status: 'new' | 'confirmed' | 'in_progress' | 'remediated' | 'accepted' | 'false_positive';
  assignedTo?: string;
  dueDate?: string;
  priority: 'critical' | 'high' | 'medium' | 'low';
  exploitability: 'public' | 'functional' | 'proof_of_concept' | 'unproven' | 'none';
  threatLevel: number;
  businessRisk: 'critical' | 'high' | 'medium' | 'low';
  remediationEffort: 'low' | 'medium' | 'high' | 'very_high';
  solution: string;
  references: string[];
  tags: string[];
  scanSource: string;
  evidence: Evidence[];
  notes: string[];
}

interface Asset {
  id: string;
  name: string;
  type: 'server' | 'workstation' | 'network_device' | 'web_application' | 'database' | 'cloud_service';
  ipAddress?: string;
  hostname?: string;
  operatingSystem?: string;
  version?: string;
  owner: string;
  businessCriticality: 'critical' | 'high' | 'medium' | 'low';
  environment: 'production' | 'staging' | 'development' | 'test';
  location: string;
  lastScanned: string;
  vulnerabilityCount: number;
  riskScore: number;
}

interface Evidence {
  type: 'screenshot' | 'log' | 'network_trace' | 'code_snippet' | 'configuration';
  content: string;
  timestamp: string;
  source: string;
}

interface ScanConfiguration {
  id: string;
  name: string;
  type: 'network' | 'web_application' | 'infrastructure' | 'container' | 'cloud' | 'code';
  targets: string[];
  schedule: string;
  lastRun: string;
  nextRun: string;
  status: 'active' | 'paused' | 'completed' | 'failed' | 'running';
  scannerType: string;
  configuration: Record<string, any>;
  findings: number;
}

interface RemediationTask {
  id: string;
  vulnerabilityId: string;
  title: string;
  description: string;
  assignee: string;
  priority: 'critical' | 'high' | 'medium' | 'low';
  status: 'open' | 'in_progress' | 'testing' | 'completed' | 'cancelled';
  createdDate: string;
  dueDate: string;
  estimatedEffort: number; // hours
  actualEffort?: number; // hours
  progress: number;
  dependencies: string[];
  approvals: Approval[];
  changeRequests: ChangeRequest[];
}

interface Approval {
  approver: string;
  status: 'pending' | 'approved' | 'rejected';
  timestamp?: string;
  comments?: string;
}

interface ChangeRequest {
  id: string;
  type: 'patch' | 'configuration' | 'upgrade' | 'replacement';
  description: string;
  impact: 'low' | 'medium' | 'high' | 'critical';
  window: string;
  approvals: Approval[];
  status: 'draft' | 'submitted' | 'approved' | 'scheduled' | 'implemented' | 'verified';
}

interface VulnerabilityMetrics {
  totalVulnerabilities: number;
  criticalVulnerabilities: number;
  highVulnerabilities: number;
  mediumVulnerabilities: number;
  lowVulnerabilities: number;
  newVulnerabilities: number;
  remediatedVulnerabilities: number;
  meanTimeToRemediate: number;
  slaCompliance: number;
  riskReduction: number;
  scanCoverage: number;
  patchCompliance: number;
}

const VulnerabilityManagement: React.FC = () => {
  const [activeTab, setActiveTab] = useState('dashboard');
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedSeverity, setSelectedSeverity] = useState('all');
  const [selectedStatus, setSelectedStatus] = useState('all');
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [isLoading, setIsLoading] = useState(false);
  const [autoRefresh, setAutoRefresh] = useState(true);

  const [vulnerabilities] = useState<Vulnerability[]>([
    {
      id: 'vuln-001',
      cveId: 'CVE-2024-8234',
      title: 'Remote Code Execution in Apache HTTP Server',
      description: 'A critical remote code execution vulnerability in Apache HTTP Server allows attackers to execute arbitrary code with elevated privileges',
      severity: 'critical',
      cvssScore: 9.8,
      cvssVector: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H',
      category: 'Remote Code Execution',
      cweId: 'CWE-787',
      affectedAssets: [
        {
          id: 'asset-001',
          name: 'Web Server 01',
          type: 'server',
          ipAddress: '10.1.1.15',
          hostname: 'web01.company.com',
          operatingSystem: 'Ubuntu 20.04',
          version: 'Apache 2.4.41',
          owner: 'IT Operations Team',
          businessCriticality: 'critical',
          environment: 'production',
          location: 'Data Center A',
          lastScanned: '2025-08-09T12:00:00Z',
          vulnerabilityCount: 3,
          riskScore: 89
        }
      ],
      discoveredDate: '2025-08-09T10:30:00Z',
      lastSeen: '2025-08-09T14:20:00Z',
      status: 'confirmed',
      assignedTo: 'Security Team',
      dueDate: '2025-08-11T23:59:59Z',
      priority: 'critical',
      exploitability: 'public',
      threatLevel: 95,
      businessRisk: 'critical',
      remediationEffort: 'medium',
      solution: 'Update Apache HTTP Server to version 2.4.58 or later. Apply security patches immediately.',
      references: [
        'https://httpd.apache.org/security/vulnerabilities_24.html',
        'https://nvd.nist.gov/vuln/detail/CVE-2024-8234',
        'https://www.exploit-db.com/exploits/51234'
      ],
      tags: ['apache', 'rce', 'public_exploit', 'critical_infrastructure'],
      scanSource: 'Nessus',
      evidence: [
        {
          type: 'network_trace',
          content: 'HTTP request showing vulnerable endpoint response',
          timestamp: '2025-08-09T10:35:00Z',
          source: 'Network Scanner'
        }
      ],
      notes: ['Exploit code publicly available', 'Patch available from vendor', 'Emergency change window approved']
    },
    {
      id: 'vuln-002',
      cveId: 'CVE-2024-7892',
      title: 'SQL Injection in Customer Portal',
      description: 'SQL injection vulnerability in the customer portal allows unauthorized access to sensitive customer data',
      severity: 'high',
      cvssScore: 7.5,
      cvssVector: 'CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N',
      category: 'SQL Injection',
      cweId: 'CWE-89',
      affectedAssets: [
        {
          id: 'asset-002',
          name: 'Customer Portal',
          type: 'web_application',
          hostname: 'portal.company.com',
          owner: 'Development Team',
          businessCriticality: 'high',
          environment: 'production',
          location: 'Cloud - AWS',
          lastScanned: '2025-08-09T08:00:00Z',
          vulnerabilityCount: 5,
          riskScore: 74
        }
      ],
      discoveredDate: '2025-08-08T16:45:00Z',
      lastSeen: '2025-08-09T12:00:00Z',
      status: 'in_progress',
      assignedTo: 'Development Team',
      dueDate: '2025-08-15T17:00:00Z',
      priority: 'high',
      exploitability: 'functional',
      threatLevel: 78,
      businessRisk: 'high',
      remediationEffort: 'high',
      solution: 'Implement parameterized queries and input validation. Code review required.',
      references: [
        'https://owasp.org/www-community/attacks/SQL_Injection',
        'https://nvd.nist.gov/vuln/detail/CVE-2024-7892'
      ],
      tags: ['sql_injection', 'web_application', 'customer_data', 'owasp_top10'],
      scanSource: 'OWASP ZAP',
      evidence: [
        {
          type: 'screenshot',
          content: 'SQL injection payload successful execution screenshot',
          timestamp: '2025-08-08T16:50:00Z',
          source: 'Web Application Scanner'
        }
      ],
      notes: ['Development team notified', 'Code fix in progress', 'UAT testing required']
    },
    {
      id: 'vuln-003',
      title: 'Outdated SSL/TLS Configuration',
      description: 'Web server configured with weak SSL/TLS protocols and cipher suites',
      severity: 'medium',
      cvssScore: 5.3,
      cvssVector: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N',
      category: 'Cryptographic Issues',
      cweId: 'CWE-326',
      affectedAssets: [
        {
          id: 'asset-003',
          name: 'Marketing Website',
          type: 'web_application',
          hostname: 'www.company.com',
          owner: 'Marketing Team',
          businessCriticality: 'medium',
          environment: 'production',
          location: 'CDN - Cloudflare',
          lastScanned: '2025-08-09T06:00:00Z',
          vulnerabilityCount: 2,
          riskScore: 45
        }
      ],
      discoveredDate: '2025-08-07T12:00:00Z',
      lastSeen: '2025-08-09T12:00:00Z',
      status: 'new',
      priority: 'medium',
      exploitability: 'unproven',
      threatLevel: 35,
      businessRisk: 'medium',
      remediationEffort: 'low',
      solution: 'Update SSL/TLS configuration to disable weak protocols and enable strong cipher suites.',
      references: [
        'https://wiki.mozilla.org/Security/Server_Side_TLS'
      ],
      tags: ['ssl_tls', 'cryptography', 'configuration', 'compliance'],
      scanSource: 'SSL Labs',
      evidence: [],
      notes: []
    },
    {
      id: 'vuln-004',
      title: 'Missing Security Headers',
      description: 'Web application missing critical security headers for XSS and clickjacking protection',
      severity: 'low',
      cvssScore: 3.1,
      cvssVector: 'CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:N/A:N',
      category: 'Configuration',
      cweId: 'CWE-16',
      affectedAssets: [
        {
          id: 'asset-004',
          name: 'API Gateway',
          type: 'web_application',
          hostname: 'api.company.com',
          owner: 'API Team',
          businessCriticality: 'high',
          environment: 'production',
          location: 'Cloud - AWS',
          lastScanned: '2025-08-09T04:00:00Z',
          vulnerabilityCount: 1,
          riskScore: 25
        }
      ],
      discoveredDate: '2025-08-06T10:00:00Z',
      lastSeen: '2025-08-09T12:00:00Z',
      status: 'accepted',
      assignedTo: 'API Team',
      priority: 'low',
      exploitability: 'unproven',
      threatLevel: 20,
      businessRisk: 'low',
      remediationEffort: 'low',
      solution: 'Add security headers: X-Frame-Options, X-XSS-Protection, Content-Security-Policy',
      references: [
        'https://owasp.org/www-project-secure-headers/'
      ],
      tags: ['security_headers', 'xss', 'clickjacking', 'hardening'],
      scanSource: 'Custom Scanner',
      evidence: [],
      notes: ['Low priority - scheduled for next sprint']
    }
  ]);

  const [assets] = useState<Asset[]>([
    {
      id: 'asset-001',
      name: 'Web Server 01',
      type: 'server',
      ipAddress: '10.1.1.15',
      hostname: 'web01.company.com',
      operatingSystem: 'Ubuntu 20.04',
      version: 'Apache 2.4.41',
      owner: 'IT Operations Team',
      businessCriticality: 'critical',
      environment: 'production',
      location: 'Data Center A',
      lastScanned: '2025-08-09T12:00:00Z',
      vulnerabilityCount: 3,
      riskScore: 89
    },
    {
      id: 'asset-002',
      name: 'Customer Portal',
      type: 'web_application',
      hostname: 'portal.company.com',
      owner: 'Development Team',
      businessCriticality: 'high',
      environment: 'production',
      location: 'Cloud - AWS',
      lastScanned: '2025-08-09T08:00:00Z',
      vulnerabilityCount: 5,
      riskScore: 74
    },
    {
      id: 'asset-003',
      name: 'Marketing Website',
      type: 'web_application',
      hostname: 'www.company.com',
      owner: 'Marketing Team',
      businessCriticality: 'medium',
      environment: 'production',
      location: 'CDN - Cloudflare',
      lastScanned: '2025-08-09T06:00:00Z',
      vulnerabilityCount: 2,
      riskScore: 45
    }
  ]);

  const [scanConfigurations] = useState<ScanConfiguration[]>([
    {
      id: 'scan-001',
      name: 'Production Infrastructure Scan',
      type: 'network',
      targets: ['10.1.1.0/24', '10.1.2.0/24'],
      schedule: 'Daily at 2:00 AM',
      lastRun: '2025-08-09T02:00:00Z',
      nextRun: '2025-08-10T02:00:00Z',
      status: 'active',
      scannerType: 'Nessus',
      configuration: {
        scanType: 'credentialed',
        plugins: 'all',
        maxHosts: 256
      },
      findings: 156
    },
    {
      id: 'scan-002',
      name: 'Web Application Security Scan',
      type: 'web_application',
      targets: ['https://portal.company.com', 'https://api.company.com'],
      schedule: 'Weekly on Sunday',
      lastRun: '2025-08-04T00:00:00Z',
      nextRun: '2025-08-11T00:00:00Z',
      status: 'active',
      scannerType: 'OWASP ZAP',
      configuration: {
        scanType: 'active',
        authenticationRequired: true
      },
      findings: 23
    }
  ]);

  const [remediationTasks] = useState<RemediationTask[]>([
    {
      id: 'task-001',
      vulnerabilityId: 'vuln-001',
      title: 'Apply Apache HTTP Server Security Patch',
      description: 'Update Apache HTTP Server to version 2.4.58 to address CVE-2024-8234',
      assignee: 'System Administrator',
      priority: 'critical',
      status: 'in_progress',
      createdDate: '2025-08-09T11:00:00Z',
      dueDate: '2025-08-11T23:59:59Z',
      estimatedEffort: 4,
      progress: 60,
      dependencies: [],
      approvals: [
        {
          approver: 'IT Operations Manager',
          status: 'approved',
          timestamp: '2025-08-09T11:30:00Z',
          comments: 'Approved for emergency maintenance window'
        }
      ],
      changeRequests: [
        {
          id: 'cr-001',
          type: 'patch',
          description: 'Apache HTTP Server security patch deployment',
          impact: 'medium',
          window: '2025-08-10 02:00-04:00 AM',
          approvals: [
            {
              approver: 'Change Advisory Board',
              status: 'approved',
              timestamp: '2025-08-09T15:00:00Z'
            }
          ],
          status: 'approved'
        }
      ]
    }
  ]);

  const [metrics] = useState<VulnerabilityMetrics>({
    totalVulnerabilities: 1247,
    criticalVulnerabilities: 12,
    highVulnerabilities: 89,
    mediumVulnerabilities: 345,
    lowVulnerabilities: 801,
    newVulnerabilities: 23,
    remediatedVulnerabilities: 156,
    meanTimeToRemediate: 14.5,
    slaCompliance: 87.3,
    riskReduction: 34.7,
    scanCoverage: 94.2,
    patchCompliance: 78.9
  });

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'bg-red-100 text-red-800 border-red-200';
      case 'high': return 'bg-orange-100 text-orange-800 border-orange-200';
      case 'medium': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'low': return 'bg-blue-100 text-blue-800 border-blue-200';
      case 'informational': return 'bg-gray-100 text-gray-800 border-gray-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'new': return 'bg-blue-100 text-blue-800';
      case 'confirmed': return 'bg-yellow-100 text-yellow-800';
      case 'in_progress': return 'bg-orange-100 text-orange-800';
      case 'remediated': return 'bg-green-100 text-green-800';
      case 'accepted': return 'bg-purple-100 text-purple-800';
      case 'false_positive': return 'bg-gray-100 text-gray-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getPriorityIcon = (priority: string) => {
    switch (priority) {
      case 'critical': return <Flame className="h-4 w-4 text-red-600" />;
      case 'high': return <AlertTriangle className="h-4 w-4 text-orange-600" />;
      case 'medium': return <Flag className="h-4 w-4 text-yellow-600" />;
      case 'low': return <Info className="h-4 w-4 text-blue-600" />;
      default: return <Info className="h-4 w-4 text-gray-600" />;
    }
  };

  const getCVSSColor = (score: number) => {
    if (score >= 9.0) return 'text-red-600';
    if (score >= 7.0) return 'text-orange-600';
    if (score >= 4.0) return 'text-yellow-600';
    return 'text-green-600';
  };

  const getAssetTypeIcon = (type: string) => {
    switch (type) {
      case 'server': return <Server className="h-4 w-4" />;
      case 'workstation': return <Cpu className="h-4 w-4" />;
      case 'network_device': return <Network className="h-4 w-4" />;
      case 'web_application': return <Globe className="h-4 w-4" />;
      case 'database': return <Database className="h-4 w-4" />;
      case 'cloud_service': return <Wifi className="h-4 w-4" />;
      default: return <HardDrive className="h-4 w-4" />;
    }
  };

  const filteredVulnerabilities = vulnerabilities.filter(vuln => {
    const matchesSearch = vuln.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         vuln.description.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         (vuln.cveId && vuln.cveId.toLowerCase().includes(searchQuery.toLowerCase()));
    const matchesSeverity = selectedSeverity === 'all' || vuln.severity === selectedSeverity;
    const matchesStatus = selectedStatus === 'all' || vuln.status === selectedStatus;
    const matchesCategory = selectedCategory === 'all' || vuln.category === selectedCategory;
    
    return matchesSearch && matchesSeverity && matchesStatus && matchesCategory;
  });

  const calculateRiskTrend = (current: number, previous: number) => {
    const change = ((current - previous) / previous) * 100;
    return { change: Math.abs(change), trend: change >= 0 ? 'up' : 'down' };
  };

  useEffect(() => {
    if (autoRefresh) {
      const interval = setInterval(() => {
        setIsLoading(true);
        setTimeout(() => setIsLoading(false), 1000);
      }, 60000); // Refresh every minute

      return () => clearInterval(interval);
    }
  }, [autoRefresh]);

  return (
    <div className="container mx-auto px-4 py-8">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6 }}
        className="mb-8"
      >
        <div className="flex justify-between items-center mb-4">
          <div>
            <h1 className="text-4xl font-bold bg-gradient-to-r from-orange-600 to-red-600 bg-clip-text text-transparent">
              Vulnerability Management System
            </h1>
            <p className="text-lg text-gray-600 mt-2">
              Comprehensive vulnerability discovery, assessment, prioritization, and remediation tracking
            </p>
          </div>
          <div className="flex items-center gap-4">
            <Button
              variant="outline"
              size="sm"
              onClick={() => setAutoRefresh(!autoRefresh)}
              className={autoRefresh ? 'bg-green-50 border-green-200' : ''}
            >
              <RefreshCw className={`h-4 w-4 mr-2 ${autoRefresh ? 'animate-spin' : ''}`} />
              Auto Refresh
            </Button>
            <Button variant="outline" size="sm">
              <Download className="h-4 w-4 mr-2" />
              Export Report
            </Button>
            <Button className="bg-orange-600 hover:bg-orange-700">
              <ScanLine className="h-4 w-4 mr-2" />
              Start Scan
            </Button>
          </div>
        </div>

        {/* Quick Statistics */}
        <div className="grid grid-cols-1 md:grid-cols-6 gap-6 mb-6">
          <motion.div
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ delay: 0.1 }}
          >
            <Card>
              <CardContent className="pt-6">
                <div className="text-center">
                  <p className="text-2xl font-bold text-red-600">{metrics.criticalVulnerabilities}</p>
                  <p className="text-sm text-gray-600">Critical</p>
                </div>
              </CardContent>
            </Card>
          </motion.div>

          <motion.div
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ delay: 0.2 }}
          >
            <Card>
              <CardContent className="pt-6">
                <div className="text-center">
                  <p className="text-2xl font-bold text-orange-600">{metrics.highVulnerabilities}</p>
                  <p className="text-sm text-gray-600">High</p>
                </div>
              </CardContent>
            </Card>
          </motion.div>

          <motion.div
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ delay: 0.3 }}
          >
            <Card>
              <CardContent className="pt-6">
                <div className="text-center">
                  <p className="text-2xl font-bold text-yellow-600">{metrics.mediumVulnerabilities}</p>
                  <p className="text-sm text-gray-600">Medium</p>
                </div>
              </CardContent>
            </Card>
          </motion.div>

          <motion.div
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ delay: 0.4 }}
          >
            <Card>
              <CardContent className="pt-6">
                <div className="text-center">
                  <p className="text-2xl font-bold text-blue-600">{metrics.lowVulnerabilities}</p>
                  <p className="text-sm text-gray-600">Low</p>
                </div>
              </CardContent>
            </Card>
          </motion.div>

          <motion.div
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ delay: 0.5 }}
          >
            <Card>
              <CardContent className="pt-6">
                <div className="text-center">
                  <p className="text-2xl font-bold text-green-600">{metrics.remediatedVulnerabilities}</p>
                  <p className="text-sm text-gray-600">Remediated</p>
                </div>
              </CardContent>
            </Card>
          </motion.div>

          <motion.div
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ delay: 0.6 }}
          >
            <Card>
              <CardContent className="pt-6">
                <div className="text-center">
                  <p className="text-2xl font-bold text-purple-600">{metrics.totalVulnerabilities}</p>
                  <p className="text-sm text-gray-600">Total</p>
                </div>
              </CardContent>
            </Card>
          </motion.div>
        </div>
      </motion.div>

      <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
        <TabsList className="grid w-full grid-cols-6">
          <TabsTrigger value="dashboard" className="flex items-center gap-2">
            <BarChart3 className="h-4 w-4" />
            Dashboard
          </TabsTrigger>
          <TabsTrigger value="vulnerabilities" className="flex items-center gap-2">
            <Bug className="h-4 w-4" />
            Vulnerabilities
          </TabsTrigger>
          <TabsTrigger value="assets" className="flex items-center gap-2">
            <Server className="h-4 w-4" />
            Asset Inventory
          </TabsTrigger>
          <TabsTrigger value="scans" className="flex items-center gap-2">
            <ScanLine className="h-4 w-4" />
            Scan Management
          </TabsTrigger>
          <TabsTrigger value="remediation" className="flex items-center gap-2">
            <Wrench className="h-4 w-4" />
            Remediation Tasks
          </TabsTrigger>
          <TabsTrigger value="reports" className="flex items-center gap-2">
            <FileText className="h-4 w-4" />
            Reports
          </TabsTrigger>
        </TabsList>

        {/* Dashboard Overview */}
        <TabsContent value="dashboard" className="space-y-6">
          {/* Key Metrics */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-sm">
                  <Clock className="h-4 w-4" />
                  Mean Time to Remediate
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-3xl font-bold text-blue-600 mb-2">
                  {metrics.meanTimeToRemediate}d
                </div>
                <div className="flex items-center gap-1">
                  <TrendingDown className="h-4 w-4 text-green-600" />
                  <span className="text-sm text-green-600">-2.3 days</span>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-sm">
                  <Target className="h-4 w-4" />
                  SLA Compliance
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-3xl font-bold text-green-600 mb-2">
                  {metrics.slaCompliance}%
                </div>
                <Progress value={metrics.slaCompliance} className="h-2" />
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-sm">
                  <ShieldCheck className="h-4 w-4" />
                  Scan Coverage
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-3xl font-bold text-purple-600 mb-2">
                  {metrics.scanCoverage}%
                </div>
                <Progress value={metrics.scanCoverage} className="h-2" />
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-sm">
                  <TrendingDown className="h-4 w-4" />
                  Risk Reduction
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-3xl font-bold text-orange-600 mb-2">
                  {metrics.riskReduction}%
                </div>
                <div className="flex items-center gap-1">
                  <TrendingUp className="h-4 w-4 text-green-600" />
                  <span className="text-sm text-green-600">+5.2%</span>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Risk Distribution */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <PieChart className="h-5 w-5" />
                  Vulnerability Distribution by Severity
                </CardTitle>
                <CardDescription>Current vulnerability landscape across all assets</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {[
                    { severity: 'critical', count: metrics.criticalVulnerabilities, color: 'bg-red-500' },
                    { severity: 'high', count: metrics.highVulnerabilities, color: 'bg-orange-500' },
                    { severity: 'medium', count: metrics.mediumVulnerabilities, color: 'bg-yellow-500' },
                    { severity: 'low', count: metrics.lowVulnerabilities, color: 'bg-blue-500' }
                  ].map((item) => {
                    const percentage = (item.count / metrics.totalVulnerabilities) * 100;
                    return (
                      <div key={item.severity} className="flex items-center justify-between">
                        <div className="flex items-center gap-2">
                          <div className={`w-3 h-3 rounded-full ${item.color}`}></div>
                          <span className="capitalize font-medium">{item.severity}</span>
                        </div>
                        <div className="flex items-center gap-2">
                          <Progress value={percentage} className="w-24 h-2" />
                          <span className="text-sm font-medium w-12 text-right">{item.count}</span>
                        </div>
                      </div>
                    );
                  })}
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Activity className="h-5 w-5" />
                  Remediation Progress
                </CardTitle>
                <CardDescription>Status of vulnerability remediation efforts</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <Alert>
                    <CheckCircle2 className="h-4 w-4" />
                    <AlertDescription>
                      <strong>156 vulnerabilities</strong> remediated in the last 30 days
                    </AlertDescription>
                  </Alert>
                  <Alert>
                    <AlertTriangle className="h-4 w-4" />
                    <AlertDescription>
                      <strong>12 critical vulnerabilities</strong> require immediate attention
                    </AlertDescription>
                  </Alert>
                  <Alert>
                    <Clock className="h-4 w-4" />
                    <AlertDescription>
                      <strong>23 new vulnerabilities</strong> discovered in the last 7 days
                    </AlertDescription>
                  </Alert>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Top Critical Vulnerabilities */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Flame className="h-5 w-5" />
                Top Critical Vulnerabilities Requiring Immediate Action
              </CardTitle>
              <CardDescription>Highest priority vulnerabilities based on risk scoring</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {vulnerabilities
                  .filter(v => v.severity === 'critical')
                  .slice(0, 3)
                  .map((vuln, index) => (
                    <div key={vuln.id} className="border rounded-lg p-4 border-red-200 bg-red-50">
                      <div className="flex justify-between items-start">
                        <div className="flex-1">
                          <div className="flex items-center gap-2 mb-2">
                            <h3 className="font-semibold">{vuln.title}</h3>
                            {vuln.cveId && (
                              <Badge variant="outline">{vuln.cveId}</Badge>
                            )}
                          </div>
                          <p className="text-gray-600 text-sm mb-2">{vuln.description}</p>
                          <div className="flex items-center gap-4 text-sm">
                            <span className="flex items-center gap-1">
                              <Target className="h-3 w-3" />
                              CVSS: {vuln.cvssScore}
                            </span>
                            <span className="flex items-center gap-1">
                              <Server className="h-3 w-3" />
                              {vuln.affectedAssets.length} assets
                            </span>
                            <span className="flex items-center gap-1">
                              <Calendar className="h-3 w-3" />
                              Due: {vuln.dueDate ? new Date(vuln.dueDate).toLocaleDateString() : 'Not set'}
                            </span>
                          </div>
                        </div>
                        <div className="text-right">
                          <div className="text-2xl font-bold text-red-600">
                            {vuln.threatLevel}
                          </div>
                          <p className="text-xs text-gray-600">Threat Level</p>
                        </div>
                      </div>
                    </div>
                  ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Vulnerabilities Tab */}
        <TabsContent value="vulnerabilities" className="space-y-6">
          {/* Search and Filter Controls */}
          <div className="flex items-center gap-4 mb-6">
            <div className="relative flex-1 max-w-md">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
              <Input
                placeholder="Search vulnerabilities, CVE IDs..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="pl-10"
              />
            </div>
            <Select value={selectedSeverity} onValueChange={setSelectedSeverity}>
              <SelectTrigger className="w-[140px]">
                <SelectValue placeholder="Severity" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Severity</SelectItem>
                <SelectItem value="critical">Critical</SelectItem>
                <SelectItem value="high">High</SelectItem>
                <SelectItem value="medium">Medium</SelectItem>
                <SelectItem value="low">Low</SelectItem>
              </SelectContent>
            </Select>
            <Select value={selectedStatus} onValueChange={setSelectedStatus}>
              <SelectTrigger className="w-[140px]">
                <SelectValue placeholder="Status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Status</SelectItem>
                <SelectItem value="new">New</SelectItem>
                <SelectItem value="confirmed">Confirmed</SelectItem>
                <SelectItem value="in_progress">In Progress</SelectItem>
                <SelectItem value="remediated">Remediated</SelectItem>
              </SelectContent>
            </Select>
            <Select value={selectedCategory} onValueChange={setSelectedCategory}>
              <SelectTrigger className="w-[180px]">
                <SelectValue placeholder="Category" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Categories</SelectItem>
                <SelectItem value="Remote Code Execution">RCE</SelectItem>
                <SelectItem value="SQL Injection">SQL Injection</SelectItem>
                <SelectItem value="Cryptographic Issues">Crypto Issues</SelectItem>
                <SelectItem value="Configuration">Configuration</SelectItem>
              </SelectContent>
            </Select>
          </div>

          {/* Vulnerabilities List */}
          <div className="grid gap-6">
            {filteredVulnerabilities.map((vuln, index) => (
              <motion.div
                key={vuln.id}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: index * 0.1 }}
              >
                <Card className={`border-l-4 ${
                  vuln.severity === 'critical' ? 'border-l-red-500' :
                  vuln.severity === 'high' ? 'border-l-orange-500' :
                  vuln.severity === 'medium' ? 'border-l-yellow-500' :
                  'border-l-blue-500'
                }`}>
                  <CardHeader>
                    <div className="flex justify-between items-start">
                      <div className="flex-1">
                        <div className="flex items-center gap-3 mb-2">
                          <CardTitle className="text-lg">{vuln.title}</CardTitle>
                          <Badge className={getSeverityColor(vuln.severity)}>
                            {vuln.severity}
                          </Badge>
                          <Badge className={getStatusColor(vuln.status)}>
                            {vuln.status.replace('_', ' ')}
                          </Badge>
                          {getPriorityIcon(vuln.priority)}
                        </div>
                        <div className="flex items-center gap-4 text-sm text-gray-600 mb-2">
                          {vuln.cveId && <span>{vuln.cveId}</span>}
                          <span>Category: {vuln.category}</span>
                          <span>Discovered: {new Date(vuln.discoveredDate).toLocaleDateString()}</span>
                          {vuln.assignedTo && <span>Assigned: {vuln.assignedTo}</span>}
                        </div>
                        <CardDescription>{vuln.description}</CardDescription>
                      </div>
                      <div className="text-right">
                        <div className={`text-3xl font-bold ${getCVSSColor(vuln.cvssScore)}`}>
                          {vuln.cvssScore}
                        </div>
                        <p className="text-xs text-gray-600">CVSS Score</p>
                        <div className="text-lg font-semibold text-red-600 mt-1">
                          {vuln.threatLevel}
                        </div>
                        <p className="text-xs text-gray-600">Threat Level</p>
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    {/* Affected Assets */}
                    <div>
                      <p className="font-medium text-sm mb-2">Affected Assets ({vuln.affectedAssets.length})</p>
                      <div className="flex flex-wrap gap-2">
                        {vuln.affectedAssets.slice(0, 3).map((asset, idx) => (
                          <Badge key={idx} variant="outline" className="flex items-center gap-1">
                            {getAssetTypeIcon(asset.type)}
                            {asset.name}
                          </Badge>
                        ))}
                        {vuln.affectedAssets.length > 3 && (
                          <Badge variant="outline">+{vuln.affectedAssets.length - 3} more</Badge>
                        )}
                      </div>
                    </div>

                    {/* Solution Preview */}
                    <div>
                      <p className="font-medium text-sm mb-1">Solution</p>
                      <p className="text-sm text-gray-600">{vuln.solution.substring(0, 150)}...</p>
                    </div>

                    {/* Tags and References */}
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <p className="font-medium text-sm mb-2">Tags</p>
                        <div className="flex flex-wrap gap-1">
                          {vuln.tags.slice(0, 4).map((tag, idx) => (
                            <Badge key={idx} variant="secondary" className="text-xs">
                              {tag}
                            </Badge>
                          ))}
                        </div>
                      </div>
                      <div>
                        <p className="font-medium text-sm mb-2">References</p>
                        <div className="flex items-center gap-2">
                          <Badge variant="outline" className="text-xs">
                            {vuln.references.length} references
                          </Badge>
                          {vuln.exploitability === 'public' && (
                            <Badge className="bg-red-100 text-red-800 text-xs">
                              Public Exploit
                            </Badge>
                          )}
                        </div>
                      </div>
                    </div>

                    {/* Action Buttons */}
                    <div className="flex items-center justify-between pt-4 border-t">
                      <div className="flex items-center gap-2">
                        <Badge variant="outline">
                          Scan Source: {vuln.scanSource}
                        </Badge>
                        {vuln.dueDate && (
                          <span className="text-sm text-gray-600">
                            Due: {new Date(vuln.dueDate).toLocaleDateString()}
                          </span>
                        )}
                      </div>
                      <div className="flex gap-2">
                        <Button size="sm" variant="outline">
                          <Eye className="h-4 w-4 mr-2" />
                          Details
                        </Button>
                        <Button size="sm" variant="outline">
                          <ExternalLink className="h-4 w-4 mr-2" />
                          References
                        </Button>
                        <Button size="sm">
                          <Wrench className="h-4 w-4 mr-2" />
                          Remediate
                        </Button>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </motion.div>
            ))}
          </div>
        </TabsContent>

        {/* Additional tabs would continue here but truncated for length */}
      </Tabs>
    </div>
  );
};

export default VulnerabilityManagement;